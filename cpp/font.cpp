#ifndef __FONT_H
#define __FONT_H

#include <kbd.h>
#include <vdu.h>
#include <dos.h>
#include <stdio.h>
#include <string.h>
#include <mem.h>

typedef unsigned word;
typedef unsigned char byte;
#define PostScriptID  0x436
#define Psf256        0
#define Psf512        1

#define FileOpenErr   0x8000
#define FileReadErr   0x4000
#define FileCreateErr 0x2000

#define FontLoaded    0x0080

void LoadUserFont(byte H,word TotChr,byte *Buf)
 {
   word Sg = FP_SEG(Buf);
   word Of = FP_OFF(Buf);
   asm push es;
   asm push bp;
   asm mov  ax,0x1100;
   asm mov  bh,H;
   asm mov  bl,0;
   asm mov  cx,TotChr;
   asm mov  dx,Sg;
   asm mov  es,Sg;
   asm mov  bp,Of;
   asm mov  dx,0;
   asm int  0x10;
   asm pop  bp;
   asm pop  es;
 }
/*void Show(byte x,byte y,char *Map,char ascii,int H)
 {
  TxtAttr=SetTxtCol(Green,Yellow);
  FillChr(x,y,x+7,y,Blank);
  xPrintf(x+1,y,"Char %c",ascii);
  TxtAttr=SetTxtCol(LightGray,Black);
  y++;
  FillChr(x,y,x+7,y+15,Blank);
  for (int i=0;i<H;i++,Map++)
   for(int j=0;j<8;j++)
    if((*Map>>(7-j))&0x1)
     SetVidAt(0,x+j,y+i,Solid,TxtAttr);
 }
word Edt(byte x,byte y,char *Map,char asc,int H)
 {
  byte xCur=0,yCur=0;
  word Key=0x00;
  Show(x,y,Map,asc,H);
  SetCurPos(0,xCur+x,yCur+y+1);
  do
   {
    Key = GetKey();
    switch(Key)
     {
      case LtArr : xCur = (xCur+7)%8;break;
      case RtArr : ++xCur%=8;break;
      case UpArr : yCur = (yCur+H-1)%H;break;
      case DnArr : ++yCur %= H;break;
      case SpcKy : *(Map+yCur) ^= (1<<(7-xCur));
     }
    Show(x,y,Map,asc,H);
    SetCurPos(0,xCur+x,yCur+y+1);
   }
  while (Key != TabKy && Key != EscKy && Key != RetKy && Key != Shft_TabKy);
  return Key;
 }*/
struct PsfHeader
 {
  word FileID;
  byte FileMode;
  byte FontHeight;
 };

class Font
 {
  public :

   byte  Buffer[4096];
   word  BufSize;
   byte  Height;
   word  swFont;
   char  *FontFile;

  public :

   Font();
   Font(Font& f);
   Font(char * FileName);

   void xCopy(Font& src,byte strt,byte stop);

   virtual void Load(char * FileName);
   virtual void Save();
   virtual void SaveAs(char * FileName);
   virtual void Activate();
   //void Edit();
 };

class PsfFont : public Font
 {
   private :
     PsfHeader Psf;

   public :

     PsfFont();
     PsfFont(Font& f);
     PsfFont(char * FileName);

     virtual void Load(char * FileName);
     virtual void Save();
     virtual void SaveAs(char * FileName);
 };

#endif

Font::Font()
 {
   swFont   = 0x0000;
   BufSize  = 4096;
   Height   = 16;
   FontFile = (char*)NULL;
   memset(Buffer,0,BufSize);
 }
Font::Font(Font& f)
 {
   memcpy(Buffer,f.Buffer,4096);
   BufSize=f.BufSize;
   Height=f.Height;
   swFont=f.swFont;
 }
Font::Font(char *FileName)
 {
   swFont   = 0x0000;
   BufSize  = 4096;
   Height   = 16;
   FontFile = (char*)NULL;
   memset(Buffer,0,BufSize);
   Load(FileName);
 }

void Font::xCopy(Font& src,byte strt,byte stop)
 {
   if (src.Height == Height)
    {
      int cpySiz = (stop-strt+1)*Height;
      memcpy(Buffer+strt*Height,src.Buffer+strt*src.Height,cpySiz);
    }
   else if (src.Height < Height)
    {
      for (int i = strt;i<stop;i++)
        memcpy(Buffer+i*Height,src.Buffer+i*src.Height,src.Height);
    }
 }

void Font::Load(char *FileName)
 {
   FILE *fp;

   if (FontFile != (char*)NULL)
       delete FontFile;

   FontFile = new char[strlen(FileName) + 1];
   strcpy(FontFile,FileName);

   swFont |= ((fp=fopen(FontFile,"rb")) == (FILE*)NULL) ? FileOpenErr:0;
   if (swFont != FileOpenErr)
    {
      BufSize=fread(Buffer,sizeof(char),BufSize,fp);
      //for (BufSize=0;BufSize<4096 && !feof(fp);BufSize++)
       // Buffer[BufSize] = getc(fp);
      BufSize = (BufSize > 4096) ? 4096:BufSize;
      Height = BufSize/256;
      swFont |= FontLoaded;
    }

   fclose(fp);
 }

void Font::Save()
 {
   FILE *fp;

   if ((swFont&FontLoaded) && FontFile != (char*)NULL)
    {
      swFont |= ((fp=fopen(FontFile,"wb")) == (FILE*)NULL) ? FileCreateErr:0;
      if (!(swFont&FileCreateErr))
	  fwrite(Buffer,sizeof(char),BufSize,fp);
      fclose(fp);
    }
 }

void Font::SaveAs(char *FileName)
 {
   FILE *fp;

   if (swFont&FontLoaded)
    {
      if (FontFile != (char*)NULL)
       delete FontFile;

      FontFile = new char[strlen(FileName) + 5];
      strcpy(FontFile,FileName);
      strcat(FontFile,".fnt");

      swFont |= ((fp=fopen(FontFile,"wb")) == (FILE*)NULL) ? FileCreateErr:0;
      if (!(swFont&FileCreateErr))
	  fwrite(Buffer,sizeof(char),BufSize,fp);

      fclose(fp);
    }
 }
void Font::Activate()
 {
   LoadUserFont(Height,256,Buffer);
 }
 /*
void Font::Edit()
 {
  char *Buf=Buffer;
  word Key=0x00;

  for (int i=0;i<32 && Key != EscKy;i++,Buf+=8*Height)
   {
    for (int j=0;j<8;j++)
     Show(1+j*10,5,Buf+j*Height,i*8+j,Height);
    j=0;
    while (j<8 && Key != EscKy)
     {
       Key = Edt(1+j*10,5,Buf+j*Height,i*8+j,Height);
       if (Key==Shft_TabKy)
	{
	  if (j==0)
	   {
	     i--;
	     Buf -= 8*Height;
	     for (j=0;j<8;j++)
	      Show(1+j*10,5,Buf+j*Height,i*8+j,Height);
	     j=7;
	   }
	  else j--;
	}
       else
	 j++;
     }
   }
 } */

PsfFont::PsfFont():Font()
 {
   Psf.FileID     = 0x436;
   Psf.FileMode   = 0;
   Psf.FontHeight = 16;
 }
PsfFont::PsfFont(Font& f) :Font(f)
 {
   Psf.FileID     = 0x436;
   Psf.FileMode   = 0;
   Psf.FontHeight = Height;
   FontFile  = (char*)NULL;
 }
PsfFont::PsfFont(char *FileName) :Font()
 {
   Psf.FileID     = 0x436;
   Psf.FileMode   = 0;
   Psf.FontHeight = 16;
   Load(FileName);
 }
void PsfFont::Load(char *FileName)
 {
   FILE *fp;

   if (FontFile != (char*)NULL)
       delete FontFile;

   FontFile = new char[strlen(FileName) + 5];
   strcpy(FontFile,FileName);
   strcat(FontFile,".psf");

   swFont |= ((fp=fopen(FontFile,"rb")) == (FILE*)NULL) ? FileOpenErr:0;
   if (swFont != FileOpenErr)
    {
      if (fread((char*)&Psf,sizeof(Psf),1,fp) != 1)
          swFont |= FileReadErr;
      else
       {
        Height = Psf.FontHeight;
        if (Height && Psf.FileID==PostScriptID)
	  BufSize=fread(Buffer,sizeof(char),BufSize,fp);

        swFont |= FontLoaded;
       }
    }
   fclose(fp);
 }
void PsfFont::Save()
 {
   FILE *fp;

   Psf.FontHeight = Height;
   if ((swFont&FontLoaded) && FontFile != (char*)NULL)
    {
      swFont |= ((fp=fopen(FontFile,"wb")) == (FILE*)NULL) ? FileCreateErr:0;
      if (!(swFont&FileCreateErr))
       {
	fwrite((char*)&Psf,sizeof(Psf),1,fp);
        fwrite(Buffer,sizeof(char),BufSize,fp);
       }
      fclose(fp);
    }
 }

void PsfFont::SaveAs(char *FileName)
 {
   FILE *fp;
   printf("\n %x",swFont);
   if (swFont&FontLoaded)
    {
      if (FontFile != (char*)NULL)
       delete FontFile;

      FontFile = new char[strlen(FileName) + 5];
      strcpy(FontFile,FileName);
      strcat(FontFile,".psf");
      printf("\n%s",FontFile);
      //Psf.FontHeight = Height;
      swFont |= ((fp=fopen(FontFile,"wb")) == (FILE*)NULL) ? FileCreateErr:0;

      if (!(swFont&FileCreateErr))
       {
        fwrite((char*)&Psf,sizeof(Psf),1,fp);
        fwrite(Buffer,sizeof(char),BufSize,fp);
       }
      fclose(fp);
    }
 }


main(int argc,char *argv[])
 {
 byte table[] = {
     0xff,0x64,0x94,0x14,0x7c,0x14,0x94,0x64,
     0xff,0x00,0x00,0x10,0x00,0x10,0x00,0x00,
     0xcb,0x38,0x20,0x3c,0x04,0x34,0x3c,0x10,
     0xff,0x38,0x44,0x04,0x38,0x04,0x84,0x78,
     0xff,0x60,0x90,0x1c,0x32,0x12,0x90,0x60,

     0xff,0x12,0x12,0x12,0x7c,0x20,0x10,0x08,
     0xff,0x12,0xd2,0x3e,0xd2,0x16,0x04,0x06,
     0xff,0x10,0x10,0xfe,0x92,0xf2,0x12,0x10,
     0xff,0x22,0x22,0x2e,0xca,0x8e,0x42,0x22,
     0xff,0x12,0x12,0x12,0xf2,0x92,0x52,0x32,

     0xff,0x82,0x92,0x66,0x26,0x1a,0x02,0x02,
     0xff,0x10,0x74,0x40,0x7c,0x04,0x44,0x38,
     0xff,0x02,0x02,0xe2,0x22,0x1e,0x02,0x02,
     0xff,0x60,0x80,0x90,0x64,0x2c,0x24,0x1a,
     0xff,0x02,0x82,0x8e,0x4A,0x32,0x02,0x02,

     0xEF,0x28,0x28,0x28,0xFE,0xAA,0x6A,0x02,
     0xFF,0x02,0x32,0x08,0x0E,0x8A,0x72,0x02,
     0xFF,0x08,0x08,0x38,0x40,0x40,0x42,0x3E,
     0xFF,0x10,0x10,0x38,0x44,0x44,0xC4,0x38,
     0xFF,0x10,0x70,0x40,0x7C,0x04,0x44,0x38,

     0xFF,0x10,0x30,0x40,0x4C,0x4C,0x38,0x00,
     0xFF,0x4A,0x4A,0x4A,0x4A,0x32,0x02,0x02,
     0xFF,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,
     0xAF,0x52,0x12,0x22,0x46,0x3A,0x02,0x02,
     0xFF,0x10,0x30,0x40,0x4C,0x4C,0x38,0x08,

     0x6F,0x82,0x92,0x66,0x26,0x1A,0x02,0x02,
     0xFF,0x02,0x02,0xFE,0xA2,0x42,0x02,0x02,
     0xFF,0x22,0x22,0x22,0x1E,0x02,0x02,0x02,
     0xFF,0x90,0x90,0x90,0x7C,0x12,0x12,0x12,
     0xFF,0x02,0x1E,0x32,0x2A,0x26,0x1E,0x02,

     0xF3,0x12,0x12,0x12,0xFE,0x52,0x32,0x12,
     0xFF,0x12,0x12,0x12,0xFE,0x52,0x32,0x12,
     0xFF,0x62,0x22,0x22,0xC6,0x7A,0x02,0x02,
     0xFF,0x04,0x04,0x04,0x38,0x10,0x08,0x04,
     0xFF,0x02,0x02,0x6E,0x92,0x92,0x92,0x92,

     0xFF,0x02,0x1E,0x22,0x22,0x1E,0x02,0x02,
     0xFF,0x7A,0x6A,0x0A,0x72,0x22,0x12,0x0A,
     0xFF,0x22,0x32,0x2A,0x26,0x1E,0x02,0x02,
     0xFF,0x12,0x12,0x12,0x7E,0x42,0x22,0x12,
     0xFF,0x08,0x38,0x40,0x38,0x48,0x40,0x38,

     0x8F,0x32,0x36,0x5A,0x42,0x5A,0x3A,0x12,
     0xFF,0x02,0x3A,0x06,0x06,0x0A,0x12,0x22,
     0xFF,0x02,0x02,0x1E,0x0A,0xCA,0x72,0x42,
     0xFF,0x08,0x08,0x78,0x4F,0x78,0x08,0x08,
     0xFF,0x20,0x26,0x29,0xC9,0x46,0x20,0x10,

     0xFF,0x10,0x10,0x10,0xF0,0x90,0x50,0x30,
     0xFF,0x80,0x90,0x64,0x24,0x18,0x00,0x00,
     0xFF,0x00,0x00,0xE0,0x20,0x1F,0x00,0x00,
     0xFF,0x00,0x80,0x8F,0x48,0x30,0x00,0x00,
     0xEF,0x28,0x28,0x28,0xFF,0xA8,0x68,0x28,

     0xFF,0x00,0x00,0x3F,0x40,0x40,0x40,0x40,
     0xAF,0x50,0x10,0x23,0x44,0x38,0x00,0x00,
     0x6F,0x80,0x90,0x61,0x22,0x1C,0x00,0x00,
     0xFF,0x00,0x00,0xFF,0xA0,0x40,0x00,0x00,
     0xFF,0x20,0x20,0x20,0x1F,0x00,0x00,0x00,

     0xFF,0x90,0x90,0x90,0x7F,0x10,0x10,0x10,
     0xFF,0x00,0x1E,0x32,0x2A,0x26,0x1E,0x00,
     0xF3,0x10,0x10,0x10,0xFF,0x50,0x30,0x10,
     0xFF,0x10,0x10,0x10,0xFF,0x50,0x30,0x10,
     0xFF,0x60,0x20,0x21,0xC2,0x7C,0x00,0x00,

     0xFF,0x00,0x00,0x6F,0x90,0x90,0x90,0x90,
     0xFF,0x00,0x1E,0x22,0x22,0x1E,0x00,0x00,
     0xFF,0x78,0x68,0x08,0x70,0x20,0x10,0x08,
     0xFF,0x20,0x30,0x28,0x24,0x1E,0x00,0x00,
     0xFF,0x10,0x10,0x10,0x7F,0x40,0x20,0x10,

     0xFF,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
     0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,
     0xFF,0x10,0xFE,0x92,0xF2,0x32,0x50,0x90,
     0xFF,0x12,0x12,0x12,0x72,0x26,0x0A,0x12,
     0xFF,0x82,0x92,0x66,0x3E,0x0A,0x12,0x22,

     0xFF,0x10,0x30,0x40,0x4C,0x38,0x14,0x20,
     0xFF,0x22,0x22,0x22,0x1E,0x06,0x0A,0x12,
     0xFF,0x90,0x90,0x90,0x7C,0x32,0x52,0x92,
     0xFF,0x02,0x0E,0x1A,0x16,0x0E,0x0A,0x12,
     0xF3,0x12,0x12,0x12,0x7E,0x26,0x0A,0x12,

     0xFF,0x02,0x1E,0x12,0x1E,0x06,0x0A,0x12,
     0x77,0x52,0x72,0x2A,0x46,0x8A,0x12,0x22,
     0xFF,0x22,0x22,0x22,0xFE,0x86,0x8A,0x52,
     0xFF,0x12,0x12,0x12,0x7E,0x26,0x0A,0x12,
     0xFF,0x20,0x20,0x2C,0xF2,0x82,0x42,0x20,

     0x00,0x00,0x00,0x00,0x00,0x0C,0x12,0x12,
     0x00,0x00,0x00,0x00,0x00,0x60,0x90,0x90,
     0x00,0x00,0x00,0x00,0x80,0xC0,0x20,0x10,
     0x00,0x00,0x00,0x00,0xA0,0x50,0x30,0x10,
     0x00,0x00,0x00,0x00,0x00,0x4C,0x12,0x12,

     0x00,0x00,0x00,0x00,0x00,0x64,0x90,0x90,
     0x00,0x00,0x00,0x00,0x80,0xC4,0x20,0x10,
     0x00,0x00,0x00,0x00,0xA0,0x54,0x30,0x10,
     0x00,0x00,0x00,0x00,0x06,0x08,0x08,0x06,
     0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,

     0x00,0x00,0x00,0x00,0x00,0x54,0x44,0x38 };
   Font    *f;
   PsfFont ps("C:\\thomas\\fonts\\psf\\8x8\\thin-08");
   PsfFont ps16("C:\\thomas\\fonts\\psf\\8x16\\modern");

   PsfFont k("k");
   char *in;
   char *str;
   char *filnam;
//    = new PsfFont
   memcpy(ps.Buffer+65*8,table,sizeof(table));
   ps.SaveAs("Devnagri");
//   memset(ps16.Buffer+65*16,0,sizeof(table)*2);
   for (int i=0;i< 91;i++)
    {
      memset(ps16.Buffer+65*16+i*16,0,16);
//      for (int j=0 ;j<8;j++)
 //      {
         memcpy(ps16.Buffer+65*16+i*16+2,table+i*8,8*sizeof(byte));
   //      memcpy(ps16.Buffer+65*16+i*16+j*2+1,table+i*8+j,sizeof(byte));
    //   }
     // ps16.xCopy(ps,65+i*16,ta65+sizeof(table));
    }
   k.Activate();
   ps.Activate();
   ps16.SaveAs("dev16");
  // ps16.Activate();

/*   if (argc > 1)
    {
      in = (char *)argv[1];
      for (str=argv[1];*str != '.' && *str != 0;str++);
      if (strcmpi(str+1,"psf"))
       {
	 f = new Font(in);
	 strcpy (str,"\0");
	 filnam = str;
	 while (*str != '\\' && str)
	   str--;
	 filnam = new char [strlen(str+1)+1];
	 strcpy (filnam,str+1);
	 ps = *f;
	 printf("%s",filnam);
	 ps.SaveAs(filnam);
       }
    }*/
   return 0;
 }/*
main(int argc,char **argv)
 {
   char *str;
   char *filnam;
   if (argc > 1)
    {
     ModeSearch(Txt80x25x16x8);

     filnam = (char*) argv[1];
     for (str=argv[1];*str != '.' && *str != 0;str++);
	 if (*str == '.') *str = 0;
     PsfFont ps(filnam);
     ps.Activate();
     ps.Edit();
    // ps.xCopy(m,1,2);
     ps.xCopy(m,16,17);
    //
     str--;
     while (*str != '\\' && str)
	   str--;
     filnam = str+1;
     ps.SaveAs(filnam);
    }
//   ps.Edit();
//   ClrPage(0,0x7F0);
//   GetKey();

  return 0;
 }            */